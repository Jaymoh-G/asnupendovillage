on: push
name: 🚀 Deploy Laravel as ZIP + Extract Script

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v2

      - name: 🧰 Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: 🔐 Copy .env.example to .env
        run: cp .env.example .env

      - name: 🧶 Install Composer dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: 🧰 Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 📦 Install Node dependencies
        run: npm install

      - name: 🛠️ Build frontend assets
        run: npm run build

      - name: 🛠️ Ensure Laravel storage dirs exist
        run: |
          mkdir -p storage/framework/views
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/logs
          chmod -R 775 storage
          chmod -R 775 bootstrap/cache

      - name: ⚙️ Laravel optimization
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: 🗜️ Zip deployment package (Optimized)
        run: |
          echo "Creating optimized deployment package..."

          # Create a temporary directory for deployment files
          mkdir -p deploy-temp

          # Copy only necessary files and directories that exist
          cp -r app deploy-temp/ 2>/dev/null || echo "app directory copied"
          cp -r bootstrap deploy-temp/ 2>/dev/null || echo "bootstrap directory copied"
          cp -r config deploy-temp/ 2>/dev/null || echo "config directory copied"
          cp -r database deploy-temp/ 2>/dev/null || echo "database directory copied"
          cp -r public deploy-temp/ 2>/dev/null || echo "public directory copied"
          cp -r resources deploy-temp/ 2>/dev/null || echo "resources directory copied"
          cp -r routes deploy-temp/ 2>/dev/null || echo "routes directory copied"
          cp -r storage deploy-temp/ 2>/dev/null || echo "storage directory copied"
          cp -r vendor deploy-temp/ 2>/dev/null || echo "vendor directory copied"

          # Copy individual files that exist
          cp artisan deploy-temp/ 2>/dev/null || echo "artisan file copied"
          cp composer.json deploy-temp/ 2>/dev/null || echo "composer.json copied"
          cp composer.lock deploy-temp/ 2>/dev/null || echo "composer.lock copied"

          # Copy lang directory only if it exists
          if [ -d "lang" ]; then
            cp -r lang deploy-temp/
            echo "lang directory copied"
          else
            echo "lang directory not found, skipping"
          fi

          # Remove unnecessary files from storage
          rm -rf deploy-temp/storage/logs/* 2>/dev/null || true
          rm -rf deploy-temp/storage/app/* 2>/dev/null || true
          rm -rf deploy-temp/storage/debugbar/* 2>/dev/null || true
          rm -rf deploy-temp/storage/framework/cache/* 2>/dev/null || true
          rm -rf deploy-temp/storage/framework/sessions/* 2>/dev/null || true
          rm -rf deploy-temp/storage/framework/views/* 2>/dev/null || true
          rm -rf deploy-temp/bootstrap/cache/* 2>/dev/null || true

          # Create optimized zip with better error handling
          cd deploy-temp
          echo "Creating zip file..."
          zip -r ../deploy.zip . -x "*.log" "*.tmp" "*.cache" || {
            echo "Error creating zip file"
            exit 1
          }
          cd ..

          # Verify zip file integrity
          echo "Verifying zip file integrity..."
          unzip -t deploy.zip || {
            echo "Error: Zip file is corrupted"
            exit 1
          }

          # Clean up
          rm -rf deploy-temp

          echo "Deployment package size:"
          ls -lh deploy.zip

          # Show zip file info
          echo "Zip file contents:"
          unzip -l deploy.zip | head -20

      - name: 💾 Upload deploy.zip to GitHub (Manual Upload)
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: |
            deploy.zip
            extract.php
          retention-days: 30

      - name: 📋 Display download instructions
        run: |
          echo "=========================================="
          echo "🚀 Deployment package created successfully!"
          echo "=========================================="
          echo ""
          echo "📦 File: deploy.zip"
          echo "📏 Size: $(ls -lh deploy.zip | awk '{print $5}')"
          echo ""
          echo "📥 To download:"
          echo "1. Go to this workflow run"
          echo "2. Scroll down to 'Artifacts' section"
          echo "3. Click 'deploy-package' to download"
          echo ""
          echo "📤 Manual upload instructions:"
          echo "1. Download deploy.zip from artifacts"
          echo "2. Upload to: /staging.asnupendovillage.org/"
          echo "3. Run: https://staging.asnupendovillage.org/e.php"
          echo "=========================================="
